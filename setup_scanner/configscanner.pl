#!/usr/bin/perl -w
use strict;
use LWP::UserAgent;
use HTTP::Request;
use HTTP::Response;
use HTTP::Cookies;
use HTTP::Request::Common;
use Data::Dumper;
use Getopt::Std;
use XML::LibXML qw();
use Net::Netmask;
use Net::Nslookup;
#
#
# configscanner.pl - setup Asset Groups, VLAN's and associated detail using the
# Qualysguard API

#  need even with ssl_opts verify hostnames off or 0
BEGIN {
	$ENV{'PERL_LWP_SSL_VERIFY_HOSTNAME'} = 0 
};

sub usage()
{
print STDERR << "EOF";
$0 : A program to configure one or more virtUAl scanners in the QualysGuard portal 
after they have been initialized within the VMWARE infrastructure.  
	
usage : $0 [-eh]
	
-e	: environment (POD1 or POD2))
-h 	: this (help) output
	
example : $0 -e QA

NOTE: a file named activationcodes.csv must exist in the same directory this is run 
	  from, with THD stores names one per line.  This is the output file 
	  generated by the the setupscanner.pl program.
	
EOF
exit;
}
#Variables used across all subroutines - globally scoped
our $APIURL = "";
our $API_USER; our $API_PWD;
our $UA; our $RESPONSE; 
our $SCANXML;

# must give an environment to work on - QA or PROD
# QA is on POD 2
# PROD is on POD 1ZZ
my %opt; 
getopts('he:', \%opt) or usage();
if ($opt{h}) {usage(); exit; }
my $ENVIRONMENT = "";

if ($opt{e} eq "POD2") {
	$APIURL = "https://qualysapi.qg2.apps.qualys.com";
	$ENVIRONMENT = "POD2";	
	$API_USER = "APICRED";
	$API_PWD = "XXXXXXXXXX";
}
elsif ($opt{e} eq "POD1") {
	$APIURL = "https://qualysapi.qualys.com";
	$ENVIRONMENT = "POD1";
	$API_USER = "APICRED";
	$API_PWD = "XXXXXXXXX";
}
else { usage(); exit; }
#Delete the log file from a previous run so we get a clean one
#unlink "authcode_output.xml";


# Log in the global $UA object and set the QUAlysSession cookie
# or die with an error.
sub login
{
	#Configure the User Agent 
	my $AGENT_STR = "QualysGuard API";
	$UA = LWP::UserAgent->new('agent'                => $AGENT_STR,
	                          'requests_redirectable' => [],
	                          'timeout'               => 900);
	$UA->ssl_opts( verify_hostnames => 0 ); 
	$UA->default_header('X-Requested-With' => $AGENT_STR);
	$UA->cookie_jar({});
	my $COOKIEJAR = HTTP::Cookies->new();
	print "Logging in...\n";
	my $r = POST($APIURL . '/api/2.0/fo/session/', ['action' => 'login','username' => $API_USER,'password' => $API_PWD]);
	$RESPONSE = $UA->request($r);
	#print "DEBUG - Login RESPONSE:\n" . $RESPONSE->content if ($debug);
	die("Login failed with info:\n".Dumper($RESPONSE)) unless ($RESPONSE->is_success);
	my $cookie = $RESPONSE->{'_headers'}->{'set-cookie'};
	$cookie =~ m/QualysSession=(.*);.*;.*/;
}    
# Get the session cookie - it looks like this:
# QUAlysSession=b91647c540ab2d45edde245c7b9a9db1; path=/api; secure


sub logout
{
	print "Logging out...\n";
	$RESPONSE = $UA->post($APIURL . '/api/2.0/fo/session/', ['action' => 'logout']);
	#print "Logout RESPONSE:\n" . $RESPONSE->content;
	die("Logout failed with info:\n".Dumper($RESPONSE)) unless ($RESPONSE->is_success);
}

sub load_scanner_status
{
	#print " in Sub load_scanner_status \n";
	my $URL = $APIURL . "/api/2.0/fo/appliance/?action=list";
	my $REQ = HTTP::Request->new(GET => $URL);
	#$REQ->authorization_basic($API_USER, $API_PWD);
	my $RESULT = $UA->request($REQ);
	my $XMLCONTENT = $RESULT->content;
	if (! $RESULT->is_success) {
		my $ERROR = $RESULT->status_line;
		warn "Failed to fetch scanner list with error: $ERROR";
		logout();
		exit;
	}
	#else { print "Loaded XML\n"; }
	#$SCANXML has the Scanner XML in memory for use in remainder of program.
	$SCANXML = XML::LibXML->load_xml(string => $XMLCONTENT);
}

sub get_scanner_status
{
	my $SN = $_[0];
	#print "In Sub get_scanner_status - looking for $SN\n";
	foreach my $scanner ($SCANXML->findnodes('//APPLIANCE_LIST_OUTPUT//APPLIANCE')) {
		my $scanname = $scanner->findnodes('./NAME');
		my $scanID = $scanner->findnodes('./ID');
		my $status = $scanner->findnodes('./STATUS');
		#my $stat = $status->to_literal;
		if ($scanname->to_literal eq $SN) {
			my $stat = $status->to_literal;
			return $scanID, $stat;
		}
	}	
}

our $range = ""; our $IP_ADDR; our $NM;

sub getrange {
    $IP_ADDR = $_[0];
	$NM = $_[1];
	my $block = Net::Netmask->new($IP_ADDR . ":" . $NM);
	my $base = $block->base();
	#print "BASE:" . $base . "\n";
	
	# nth-2 rturns last useable IP which is what QUalys wants
	# YOu don't scan Broadcast address
	my $last_useable = $block->nth(-2);
	return $base . "-" . $last_useable;
}

sub setup_assetgroup {
	my $TITLE = $_[2] . " Asset Group";
	print "Setting up: " . $TITLE . "\n";
	my $URL = $APIURL . "/api/2.0/fo/asset/group/?action=add&title=" . $TITLE . "&ips=" . $_[0] . "&appliance_ids=" . $_[1];
	my $REQ = HTTP::Request->new(POST => $URL);
	#$REQ->authorization_basic($API_USER, $API_PWD);
	my $RESULT = $UA->request($REQ);
	my $XMLCONTENT = $RESULT->content;
	if (! $RESULT->is_success) {
		my $ERROR = $RESULT->status_line;
		warn "Failed to add asset group with error: $ERROR";
		print $ERROR;
	}
	else { print "Asset Group successfully Added for $_[2]\n"; 
		   # Comment out the following when not debugging	
		   print $XMLCONTENT; 
	}
}

sub setup_vlans {
	print "Setting up VLAN's with " . $_[0] . "\n";
	my $URL = $APIURL . "/api/2.0/fo/appliance/?action=update&id=" . $_[1] . "&set_vlans=" . $_[0];
	my $REQ = HTTP::Request->new(POST => $URL);
	#$REQ->authorization_basic($API_USER, $API_PWD);
	my $RESULT = $UA->request($REQ);
	my $XMLCONTENT = $RESULT->content;
	if (! $RESULT->is_success) {
		my $ERROR = $RESULT->status_line;
		warn "Failed to add VLAN's with error: $ERROR";
		print $ERROR;
	}
	else { print "VLAN's successfully Added for $_[2]\n"; }	
}
# MAIN here
# This example uses DNS to get the network information necessary to configure the 
# systems
my %VLANS_SM = (); my %VLANS_GW = ();

%VLANS_SM = (
	  '2' => '255.255.252.0',
	'010' => '255.255.255.0',
	'012' => '255.255.255.0',
	'013' => '255.255.255.192',
	'014' => '255.255.255.192',
	'015' => '255.255.255.192',
	'030' => '255.255.255.128',
	'090' => '255.255.255.240',
	'555' => '255.255.255.128'
);

my $STATUS = ""; our $SCANNERNAME = ""; our $SCANNERID = "";
# Array of the VLAN's we use
our @MY_VLANS = ("2","010","012","013","014","015","030","090","555");
my $AG = ""; my $VLANNAME; my $VLAN_S = "";
my $ip_address; my @OCTETS; our $STORENAME; my $RESULT;
login();

load_scanner_status();

# open the list of scanners CSV and begin processing one at a time
# The activationcodes.csv file should be a text file with one store name per line
open (LOCATION, "activationcodes.csv") or die "Couldnt open activationcodes.csv\n";
while (<LOCATION>) {
	#print "Processing Location: ";
	our @SCANNER_INFO = split(/,/);
	$SCANNERNAME = $SCANNER_INFO[0];
	#print $SCANNERNAME, "\n" ;
	# Just to use the right term in the right place to cut own on confusion.
	$STORENAME = $SCANNERNAME;
	($SCANNERID, $STATUS) = get_scanner_status($SCANNERNAME);
	print $SCANNERID . " " . $STATUS;
	#begin setup of scanner config
	foreach (@MY_VLANS) {
		# Handle the VLAN2, as it's a different DNS format name
		print "Processing VLAN #: " . $_ . "\n";
		if ($_ eq "2") { 
			#NOTE: you can't leave this commented - need code to resolve the IP for your
			# environment for this to work properly
			#$ip_address = nslookup(host=> "stqualys.$STORENAME.customer.com", server=> '4.2.2.1'); 
			#or warn ("Store $STORENAME timed out!"); logout(); exit; 
		    print "qscanner.$STORENAME.customer.com\n";
		}
		else {  #All the other VLAN's FQDN's follow this format
			$VLANNAME = "stqualys-vlan" . "$_." . $STORENAME; 
			print "qscanner.$VLANNAME.customer.com" . "\n";
			
			#NOTE: you can't leave this commented - need code to resolve the IP for your
			# environment for this to work properly
			#$ip_address = nslookup(host=> "$VLANNAME.customer.com", server=> '4.2.2.1/'); 
			#or warn("Store $STORENAME timed out!"); logout(); exit; 
			$VLAN_S = "$_|$ip_address|" . $VLANS_SM{$_} . "|vlan" . $_ . "," . $VLAN_S;
		}
		@OCTETS = split (/\./, $ip_address);
		# lookup table hash for the Gateway for each VLAN
		# Needs to be here after IP is split, since this is a lookup table with variables
		%VLANS_GW = (	 
			  '2' => "10.$OCTETS[1].$OCTETS[2].2",
			'010' => "10.$OCTETS[1].$OCTETS[2].1",
			'012' => "10.$OCTETS[1].$OCTETS[2].1",
			'013' => "10.$OCTETS[1].$OCTETS[2].1",
			'014' => "10.$OCTETS[1].$OCTETS[2].65",
			'015' => "10.$OCTETS[1].$OCTETS[2].129",
			'030' => "10.$OCTETS[1].$OCTETS[2].129",
			'090' => "10.$OCTETS[1].$OCTETS[2].241",
			'555' => "10.$OCTETS[1].$OCTETS[2].1"
		);
		my $NETMASK = $VLANS_SM{$_};
		my $GATEWAY = $VLANS_GW{$_};
	#print $NETMASK,",",$VLANS_GW{2},"\n";
		$range = getrange($ip_address, $NETMASK);
		# print $range, "\n";
		$AG =  $range . "," . $AG;
	}
	#clean up that last comma
	chop $AG; chop $VLAN_S;
	
	# The asset Group and the VLAN string are built, add them to the scanner configuration!
	setup_assetgroup($AG, $SCANNERID, $STORENAME);
	# Set up the VLAN's
	setup_vlans($VLAN_S, $SCANNERID, $STORENAME);
}
close LOCATION;

logout();
